{
  "Page Class Component Snippet": {
    "prefix": "cpcomp",
    "description": "Snippet to create page Class component",
    "scope": "typescriptreact",
    "body": [
      "import { ContextDataWithStore } from \"core/models/context-with-store.model.js\";",
      "import { Component, ReactNode } from \"react\";",
      "import { connect } from \"react-redux\";",
      "import { AppDispatch, RootState } from \"src/redux/create-store.js\";",
      "import ${1/(.)/${1:/capitalize}/}Reducer, { fetch${1/(.)/${1:/capitalize}/}PageData } from \"./${1}.redux.js\";",
      "",
      "class ${1/(.)/${1:/capitalize}/}Page extends Component<${1/(.)/${1:/capitalize}/}PageProps, ${1/(.)/${1:/capitalize}/}PageState> {",
      "  public static getInitialProps(ctx: ContextDataWithStore) {",
      "    return ctx.store.dispatch(fetch${1/(.)/${1:/capitalize}/}PageData());",
      "  }",
      "",
      "  render(): ReactNode {",
      "    // eslint-disable-next-line @typescript-eslint/no-unused-vars",
      "    const { pageData } = this.props;",
      "",
      "    return <h1>${1/(.)/${1:/capitalize}/} Page</h1>;",
      "  }",
      "}",
      "",
      "const mapStateToProps = (state: RootState) => ({",
      "  pageDate: state.${1}.pageData,",
      "});",
      "",
      "// eslint-disable-next-line @typescript-eslint/no-unused-vars",
      "const mapDispatchToProps = (dispatch: AppDispatch) => ({});",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1/(.)/${1:/capitalize}/}Page);",
      "export interface ${1/(.)/${1:/capitalize}/}PageProps",
      "  extends ReturnType<typeof mapStateToProps>,",
      "    ReturnType<typeof mapDispatchToProps> {}",
      "",
      "export interface ${1/(.)/${1:/capitalize}/}PageState {}",
      "",
      "export const reducer = {",
      "  ${1}: ${1/(.)/${1:/capitalize}/}Reducer,",
      "};"
    ]
  },
  "With Redux Class Component Snippet": {
    "prefix": "crcomp",
    "description": "Snippet to create Class component with Redx",
    "scope": "typescriptreact",
    "body": [
      "import { Component } from \"react\";",
      "import { connect } from \"react-redux\";",
      "import { AppDispatch, RootState } from \"src/redux/create-store.js\";",
      "",
      "export class ${1}Component extends Component<${1}Props, ${1}State> {",
      "  public state: Readonly<${1}State> = {};",
      "",
      "  render() {",
      "    return (",
      "      <></>",
      "    );",
      "  }",
      "}",
      "",
      "const mapStateToProps = (state: RootState) => ({",
      "  ${2}",
      "});",
      "",
      "// eslint-disable-next-line @typescript-eslint/no-unused-vars",
      "const mapDispatchToProps = (dispatch: AppDispatch) => ({});",
      "",
      "export const ${1} = connect(mapStateToProps, mapDispatchToProps)(${1}Component);",
      "export interface ${1}Props",
      "  extends ReturnType<typeof mapStateToProps>,",
      "    ReturnType<typeof mapDispatchToProps> {}",
      "",
      "",
      "export interface ${1}State {",
      "",
      "}"
    ]
  },
  "Class Component Snippet": {
    "prefix": "ccomp",
    "description": "Snippet to create Class component",
    "scope": "typescriptreact",
    "body": [
      "import { Component } from \"react\";",
      "",
      "export class ${1} extends Component<${1}Props, ${1}State> {",
      "  public state: Readonly<${1}State> = {${4}};",
      "",
      "  render() {",
      "    return (",
      "      <>${5}</>",
      "    );",
      "  }",
      "}",
      "",
      "export interface ${1}Props {",
      "  ${2}",
      "}",
      "",
      "export interface ${1}State {",
      "  ${3}",
      "}"
    ]
  }
}